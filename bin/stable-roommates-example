#!/usr/bin/env ruby

lib = File.expand_path("../../lib", __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require "pp"
require "stable-matching/roommate"

def solve(preferences)
  pp preferences

  begin
    pp StableMatching::Roommate.solve!(preferences)
  rescue => e
    case e
    when StableMatching::NoStableSolutionError
      puts "No stable match exists!"
    when StableMatching::InvalidPreferences
      puts e.message + ""
    else
      raise
    end
  end
end

puts "=== Example 1 - Match where a stable mathematical solution exists"
preferences = {
  "A" => ["B", "D", "F", "C", "E"],
  "B" => ["D", "E", "F", "A", "C"],
  "C" => ["D", "E", "F", "A", "B"],
  "D" => ["F", "C", "A", "E", "B"],
  "E" => ["F", "C", "D", "B", "A"],
  "F" => ["A", "B", "D", "C", "E"]
}
solve(preferences)
puts "\n"

puts "=== Example 2 - Match where no stable mathematical solution exists"
preferences = {
  "A" => ["B", "C", "D"],
  "B" => ["C", "A", "D"],
  "C" => ["A", "B", "D"],
  "D" => ["A", "B", "C"]
}
solve(preferences)
puts "\n"

puts "=== Example 3 - Bad input that fails validation"
preferences = {
  "A" => ["B", "C", "D"],
  "B" => ["C", "A", "D"],
  "C" => ["A", "B", "D"],
  "D" => ["A", "F"]
}
solve(preferences)
puts "\n"
